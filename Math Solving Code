#include <iostream>
#include <string>
#include <stack>
#include <cmath>

using namespace std;

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

int getPrecedence(char op) {
    if (op == '^')
        return 3;
    if (op == '*' || op == '/')
        return 2;
    if (op == '+' || op == '-')
        return 1;
    return 0;
}

double applyOperator(double a, double b, char op) {
    switch (op) {
    case '+':
        return a + b;
    case '-':
        return a - b;
    case '*':
        return a * b;
    case '/':
        return a / b;
    case '^':
        return pow(a, b);
    default:
        return 0.0; // Invalid function
    }
}

double evaluateExpression(const string& expression) {
    stack<double> values;
    stack<char> operators;

    for (int i = 0; i < expression.length(); i++) {
        if (expression[i] == ' ')
            continue; // Skip whitespace

        if (isdigit(expression[i]) || (expression[i] == '-' && (i == 0 || !isdigit(expression[static_cast<std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type>(i) - 1])))) {
            // Extract and push the number onto the values stack
            string numStr;
            while (i < expression.length() && (isdigit(expression[i]) || expression[i] == '.')) {
                numStr += expression[i];
                i++;
            }
            i--;
            values.push(stod(numStr));
        }
        else if (expression[i] == '(') {
            operators.push('(');
        }
        else if (expression[i] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                char op = operators.top();
                operators.pop();
                double b = values.top();
                values.pop();
                double a = values.top();
                values.pop();
                values.push(applyOperator(a, b, op));
            }
            operators.pop(); // Remove the '(' from the stack
        }
        else if (isOperator(expression[i])) {
            char op = expression[i];
            while (!operators.empty() && getPrecedence(operators.top()) >= getPrecedence(op)) {
                char topOp = operators.top();
                operators.pop();
                double b = values.top();
                values.pop();
                double a = values.top();
                values.pop();
                values.push(applyOperator(a, b, topOp));
            }
            operators.push(op);
        }
    }

    while (!operators.empty()) {
        char op = operators.top();
        operators.pop();
        double b = values.top();
        values.pop();
        double a = values.top();
        values.pop();
        values.push(applyOperator(a, b, op));
    }

    return values.top();
}

int main() {
    while (true) {
        string input;
        cout << "Enter a problem to solve: ";
        getline(cin, input);

        double result = evaluateExpression(input);

        cout << "Here are the steps:" << endl;
        cout << input << endl;
        cout << "The answer to this problem is: " << result << endl;

        char choice;
        cout << "Would you like to solve another problem? (Y/N) ";
        cin >> choice;

        if (choice != 'Y' && choice != 'y') {
            cout << "Thank you for using this calculator!" << endl;
            break;
        }

        cin.ignore(); // Clear the input buffer
    }

    return 0;
}
